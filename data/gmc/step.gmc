globaldef find_shortest_trace(me, travel)
{
    with (me as Character)
    {
        var shortest = 0;

        with (Tile)
        {
            var trace = entity_trace_with_margin(other, self, travel);
            if(trace != 0 and (shortest == 0 or trace{sqdist} < shortest{sqdist}))
                shortest = trace;
        }
        
        return shortest;
    }
}

globaldef vec_pointwise_add(a, b)
{
    for(var i = 0; i < a->len() and i < b->len(); i++)
        a[i] += b[i];
    return a;
}

def touching_anything_relative(me, xoffset, yoffset)
{
    with (me as Character)
    {
        with (Tile)
            if(aabb_overlap(vec_pointwise_add(other.bbox, [xoffset, yoffset, xoffset, yoffset]), bbox))
                return true;
    }
}

def solve_movement(me, travel)
{
    with (me as Character)
    {
        var touched_ground = false;
        for(var max_iters = 8; max_iters > 0 and (travel[0] != 0 or travel[1] != 0); max_iters--)
        {
            var trace = find_shortest_trace(me, travel);
            
            if(trace == 0)
            {
                x += travel[0];
                y += travel[1];
                update_bbox(self);
                break;
            }
            
            var new_vel = vec2_reject([xspeed, yspeed], trace{normal});
            xspeed = new_vel[0];
            yspeed = new_vel[1];
            
            if(trace{normal}[1] > 0.7)
                touched_ground = true;
            
            travel = trace{travel};
            
            x += travel[0];
            y += travel[1];
            
            travel = trace{remain};
            update_bbox(self);
        }
        
        return touched_ground;
    }
}

def touching_tile(me)
{
    with (me as Character)
    {
        with (Tile)
        {
            if(aabb_overlap(other.bbox, self.bbox))
                return self;
        }
        return false;
    }
}

with(Character)
{
    yspeed += Gravity/2;
    
    
    if(key_pressed("E"))
        want_to_jump = true;
    else if(key_released("E"))
        want_to_jump = false;
    
    
    if(key_pressed("W"))
        x_wish = -1;
    else if(key_pressed("F"))
        x_wish = 1;
    else if(key_down("W") and !key_down("F"))
        x_wish = -1;
    else if(key_down("F") and !key_down("W"))
        x_wish = 1;
    else if(!key_down("W") and !key_down("F"))
        x_wish = 0;
    
    if(x_wish > 0)
        image_xscale = 1;
    if(x_wish < 0)
        image_xscale = -1;
    
    if(want_to_jump and (on_ground or touching_anything_relative(self, 0, 1)))
    {
        yspeed = -jump_velocity;
        want_to_jump = false;
    }
    
    xspeed *= drag;
    if(x_wish != 0)
    {
        xspeed += x_wish*accel;
        if(abs(xspeed) > maxspeed)
            xspeed = maxspeed * sign(xspeed);
    }
    else
    {
        var oldsign = sign(xspeed);
        xspeed -= oldsign*deaccel;
        if(sign(xspeed) != oldsign)
            xspeed = 0;
    }
    
    if(solve_movement(self, [xspeed, yspeed]))
        on_ground = true;
    
    yspeed += Gravity/2;
}

if(mouse_button_pressed(0))
{
    if(get_target_framerate() == 250)
        set_framerate(125);
    else
        set_framerate(250);
}
