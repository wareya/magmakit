subdef find_shortest_trace()
{
    update_bbox(self);
    var shortest = 0;

    with (Tile)
    {
        var trace = entity_trace_with_margin(other, self, travel);
        if(trace != 0 and (shortest == 0 or trace["sqdist"] < shortest["sqdist"]))
            shortest = trace;
    }
    
    return shortest;
}

def vec_pointwise_add(a, b)
{
    for(var i = 0; i < len(a) and i < len(b); i++)
        a[i] += b[i];
    return a;
}

subdef touching_anything_relative(xoffset, yoffset)
{
    update_bbox(self);
    with (Tile)
        if(aabb_overlap(vec_pointwise_add(other.bbox, [xoffset, yoffset, xoffset, yoffset]), bbox))
            return true;
}

subdef solve_movement(travel)
{
    var touched_ground = false;
    for(var max_iters = 8; max_iters > 0 and (travel[0] != 0 or travel[1] != 0); max_iters--)
    {
        var trace = find_shortest_trace();
        
        if(trace == 0)
        {
            x += travel[0];
            y += travel[1];
            break;
        }
        
        var new_vel = vec2_reject([xspeed, yspeed], trace["normal"]);
        xspeed = new_vel[0];
        yspeed = new_vel[1];
        
        if(trace["normal"][1] > 0.7)
            touched_ground = true;
        
        travel = trace["travel"];
        
        x += travel[0];
        y += travel[1];
        
        travel = trace["remain"];
    }
    
    return touched_ground;
}

subdef touching_tile()
{
    update_bbox(self);
    
    with (Tile)
    {
        if(entity_overlap(other, self))
            return self;
    }
    return false;
}

with(Character)
{
    yspeed += global.gravity/2;
    
    
    if(key_pressed("E"))
        want_to_jump = true;
    else if(key_released("E"))
        want_to_jump = false;
    
    
    if(key_pressed("W"))
        x_wish = -1;
    else if(key_pressed("F"))
        x_wish = 1;
    else if(key_down("W") and !key_down("F"))
        x_wish = -1;
    else if(key_down("F") and !key_down("W"))
        x_wish = 1;
    else if(!key_down("W") and !key_down("F"))
        x_wish = 0;
    
    if(x_wish > 0)
        image_xscale = 1;
    if(x_wish < 0)
        image_xscale = -1;
    
    if(want_to_jump and (on_ground or touching_anything_relative(0, 1)))
    {
        yspeed = -jump_velocity;
        want_to_jump = false;
    }
    
    xspeed *= drag;
    if(x_wish != 0)
    {
        xspeed += x_wish*accel;
        if(abs(xspeed) > maxspeed)
            xspeed = maxspeed * sign(xspeed);
    }
    else
    {
        var oldsign = sign(xspeed);
        xspeed -= oldsign*deaccel;
        if(sign(xspeed) != oldsign)
            xspeed = 0;
    }
    
    if(solve_movement([xspeed, yspeed]))
        on_ground = true;
    
    yspeed += global.gravity/2;
}
