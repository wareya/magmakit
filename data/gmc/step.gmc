// I could pass literal arrays here, but it's technically slower to do so since it copies a vector instead of a couple u64s
def aabb_overlap(mover, static)
{
    if(mover.bbox[1] > static.bbox[0]
        and mover.bbox[0] < static.bbox[1]
        and mover.bbox[3] > static.bbox[2]
        and mover.bbox[2] < static.bbox[3])
        return true;
}

subdef touching_tile()
{
    update_bbox(self);
    
    with (Tile)
    {
        if(aabb_overlap(other, self))
            return self;
    }
    return false;
}

with(Character)
{
    yspeed += global.gravity/2;
    
    
    if(key_pressed("E"))
        want_to_jump = true;
    else if(key_released("E"))
        want_to_jump = false;
    
    
    if(key_pressed("W"))
        x_wish = -1;
    else if(key_pressed("F"))
        x_wish = 1;
    else if(key_down("W") and !key_down("F"))
        x_wish = -1;
    else if(key_down("F") and !key_down("W"))
        x_wish = 1;
    else if(!key_down("W") and !key_down("F"))
        x_wish = 0;
    
    
    if(want_to_jump)
    {
        yspeed = -jump_velocity;
        want_to_jump = false;
    }
    
    xspeed *= drag;
    if(x_wish != 0)
    {
        xspeed += x_wish*accel;
        if(abs(xspeed) > maxspeed)
        {
            xspeed = maxspeed * sign(xspeed);
        }
    }
    else
    {
        var oldsign = sign(xspeed);
        xspeed -= oldsign*deaccel;
        if(sign(xspeed) != oldsign)
            xspeed = 0;
    }
    
    
    x += xspeed;
    y += yspeed;
    
    
    var touching = touching_tile();
    while(touching != 0)
    {
        yspeed = 0;
        y -= bbox[1] - touching.bbox[0];
        y -= 0.01;
        
        touching = touching_tile();
    }
    
    
    yspeed += global.gravity/2;
}
